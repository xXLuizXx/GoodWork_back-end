LOGIN CURSO

E-MAIL: 
contatoalangabriel@gmail.com
SENHA: bebiss33





Importante saber

HTTP CODES

	1XX - Informativo: A solicitação foi aceita ou processo continua em andamento
	2XX - Confirmação
	      200: Requisição bem sucedida
	      201: Created - Geralmente usado para POST após inserção
	3XX - Redirecionamento
	      301: Moved permanently
	      302: Moved
	4XX - Erros do clente
	      400: Bad request
	      401: Unauthorized
	      403: Forbidden
	      404: Not found
	      422: Unprocessable Entity
	5XX - Erro no servidor: O servidor ao concluir a solicitação
	      500: Internal server error
	      502: Bad Gateway

TIPOS DE PARAMETROS PARA REQUISIÇÃO



Header params: Parametros que vão no cabeçalho;
Query params: Parametros inseridos no fim de uma URL (chave/valor/separação) -> fazer paginação, filtro de busca
Route params: Parametros que vão no meio da rota(URL)
Body params: Parametros no corpo da requisição -> inserção, alteração de dados (JSON)








METODOS

response.send() -> Permite que envie uma mensagem
response.json() -> Permite que reetrne alguns dados

some
find
filter
reduce
foreach

const booleano = array.some((item) => item.id === id); => retorna true ou false

const item = array.find((item) => item.id === id); => retorna o item do array que satisfaz a condição passada na função

const items = array.filter((item) => item.id > 1); => retorna um novo array que satisfaça a condição

const items = array.foreach((item, index) => {qualquer coisa});


Criando projeto Back-end NodeJS



 1 - yarnpkg init -y
 2 - Abrir projeto VScode
 3 - Colocar dependencias 
 	Frameook express -> yarnpkg add express
 4 - Criar a pasta "src" e dentro dela criar o arquivo index.js
 5 - importar o express no arquivo index.js
 6 - importar a porta
 
 7 - adicionar o nodemon para rodar a aplicação sozinha
 	yarnpkg add nodemon -D
 8 - Add um comando de script no arquivo packege.json para rodar a aplicação
 	"scripts": {
	    "dev": "nodemon src/index.js"
	  },
 


 9 - configurar baseURL no insomia
 10 - 
 
 
 
 
 TRABALHANDO COM TYPESCRIPT
 
  1 - yarnpkg init -y
 2 - Abrir projeto VScode
 3 - Colocar dependencias 
 	Frameook express -> yarnpkg add express
 4 - Criar a pasta "src" e dentro dela criar o arquivo server.ts
 5 - Adicionar dempendecia types/express -> yarnpkg add @types/express -D
 6 - Adicionar a depencia typescrip -> yarnpkg add typescript -D
 7 - Converter o codigo para conseguir rodar -> yarnpkg tsc --init
 8 - Alterar o arquivo tsconfig.json
 	Alter o "outdir" e colocar o caminho para os arquivos ex.: ./arquivosJS
 9 - Rodar o comando -> node aqruivoJS/server.js 
 8 - Rodar o codigo typescript -> yarnpkg tst
 
 
 
 
 
 --------------------------------------------------------------------------------------
 
 
 Multer -> Biblioteca para upload de arquivos
   - npm install --save multer
   
   
   
   
   
---------------------------------------------------------------------------------------
comandos docker


docker build -t project .
  902  sudo docker build -t project .
  903  sudo docker ps
  904  sudo docker run -p 3333:3333 project
  905  sudo doscker-compose up
  906  sudo docker-compose up
  907  sudo docker ps -a -> Ver containers
  908  sudo docker stop cb8ad63cd54e -> parar container usando o id do container
  910  sudo docker rm cb8ad63cd54e -> removendo container
  911  clear
  912  sudo docker-compose up -> iniciando docker-compose
  914  sudo docker-compose up -d -> rodando docker em segundo plano
  sudo docker logs project-container -f -> ver os logs do container
  sudo docker start idcontainer -> iniciar um container pausado
  sudo docker exec -it nome/id /bin/bash -> acessar a imagem da maquina
  sudo docker-compose up --force-recreate -> recria o container
  
  
  yarn typeorm migration:generate
 1001  yarn typeorm migration:drop
 1002  cler
 1003  clear
 1004  yarn typeorm migration:revert
 1005  yarn typeorm migration:create -n CreateUsers
 1006  yarn typeorm migration:run
 1007  yarn typeorm migration:revert
  
  dto -> receber ou transferir dados pro usuário
  repositories -> conversa com o banco de dados
  		Interface -> contrato
  		
  infra -> implementação da biblioteca/comunicação
  
  controller chama o useCase que chama repositories
